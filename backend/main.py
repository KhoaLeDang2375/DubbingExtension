import os
from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from youtube_transcript_api import (
    YouTubeTranscriptApi,
    TranscriptsDisabled,
    VideoUnavailable,
    NoTranscriptFound
)
from pydantic import BaseModel
from typing import List, Dict

from Translator.translator import AzureTranslator
from Text_To_Speech.TextToSpeech import TextToSpeechModule

from loguru import logger  # D√πng loguru ƒë·ªÉ log thay v√¨ print()

# ------------------ C·∫•u h√¨nh ------------------

app = FastAPI()
translator = AzureTranslator()
tts = TextToSpeechModule()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ------------------ M√¥ h√¨nh d·ªØ li·ªáu ------------------

class VideoRequest(BaseModel):
    video_id: str
    target_language: str = "vi"

# ------------------ H√†m ph·ª• tr·ª£ ------------------

def get_transcript(data: VideoRequest) -> Dict:
    try:
        transcript_list = YouTubeTranscriptApi.list_transcripts(data.video_id)
        logger.info(f"üìã Transcript list: {[t.language_code for t in transcript_list]}")

        if data.target_language in [t.language_code for t in transcript_list]:
            transcript = YouTubeTranscriptApi.get_transcript(data.video_id, languages=[data.target_language])
            logger.info(f" Found transcript in target language: {data.target_language}")
            return {"transcript": transcript, "flagTargetLang": True}
        else:
            transcript = YouTubeTranscriptApi.get_transcript(data.video_id)
            logger.warning(" Transcript kh√¥ng c√≥ ng√¥n ng·ªØ ƒë√≠ch, d√πng b·∫£n g·ªëc.")
            return {"transcript": transcript, "flagTargetLang": False}

    except TranscriptsDisabled:
        logger.error(" Transcript b·ªã v√¥ hi·ªáu h√≥a.")
        raise HTTPException(status_code=403, detail="Transcript is disabled for this video.")
    except VideoUnavailable:
        logger.error("Video kh√¥ng kh·∫£ d·ª•ng.")
        raise HTTPException(status_code=404, detail="Video is unavailable.")
    except NoTranscriptFound:
        logger.error(" Kh√¥ng t√¨m th·∫•y transcript.")
        raise HTTPException(status_code=404, detail="No transcript found for this video.")
    except Exception as e:
        logger.exception(" L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y transcript.")
        raise HTTPException(status_code=500, detail=f"Unexpected error: {str(e)}")


def make_caption(transcript: List[Dict]) -> List[Dict]:
    try:
        chunks = translator.split_transcript(transcript)
        translated_chunks = [translator.translate(chunk) for chunk in chunks]
        logger.info(" ƒê√£ d·ªãch xong to√†n b·ªô transcript.")
        return translator.mergeTranslatedTextToTranscript(transcript, translated_chunks)
    except Exception as e:
        logger.exception(" L·ªói khi d·ªãch transcript.")
        raise HTTPException(status_code=500, detail=f"Translation failed: {str(e)}")


def build_tts_segments(transcript: List[Dict], language: str = "vi") -> List[Dict]:
    """
    X√¢y d·ª±ng danh s√°ch segment cho TTS.
    - N·∫øu transcript c√≥ 'text_vi' th√¨ s·ª≠ d·ª•ng text_vi[language]
    - N·∫øu kh√¥ng th√¨ d√πng tr·ª±c ti·∫øp tr∆∞·ªùng 'text' (coi nh∆∞ transcript ƒë√£ l√† ng√¥n ng·ªØ ƒë√≠ch)
    """
    segments = []

    for entry in transcript:
        # N·∫øu c√≥ b·∫£n d·ªãch th√¨ l·∫•y b·∫£n d·ªãch
        if "text_vi" in entry and language in entry["text_vi"]:
            text = entry["text_vi"][language]
        # N·∫øu kh√¥ng c√≥ th√¨ d√πng text g·ªëc
        elif "text" in entry:
            text = entry["text"]
        else:
            raise ValueError(f"Kh√¥ng t√¨m th·∫•y n·ªôi dung cho ƒëo·∫°n transcript: {entry}")

        segments.append({
            "text": text,
            "duration": entry["duration"]
        })

    return segments


# ------------------ Endpoint ch√≠nh ------------------

@app.post("/dubbing")
async def dubbing(data: VideoRequest):
    try:
        logger.info(f" Nh·∫≠n y√™u c·∫ßu l·ªìng ti·∫øng video: {data.video_id}")
        transcript_info = get_transcript(data)

        if not transcript_info['flagTargetLang']:
            translated_transcript = make_caption(transcript_info['transcript'])
        else:
            translated_transcript = transcript_info['transcript']

        segments = build_tts_segments(translated_transcript, language=data.target_language)
        ssml = tts.generate_ssml(segments)

        try:
            tts.synthesize_to_file(ssml, "output.mp3")
            logger.info(" ƒê√£ ph√°t √¢m thanh th√†nh c√¥ng.")
            return {"status": "success", "message": "ƒê√£ ph√°t √¢m thanh th√†nh c√¥ng!"}
        except Exception as e:
            logger.warning(" Kh√¥ng th·ªÉ ph√°t tr·ª±c ti·∫øp. ƒêang l∆∞u v√†o file...")
            tts.synthesize_to_file(ssml, "output.mp3")
            return FileResponse("output.mp3", media_type="audio/mpeg", filename="voiceover.mp3")

    except Exception as e:
        logger.exception(" L·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω dubbing.")
        return JSONResponse(
            status_code=500,
            content={"status": "error", "detail": str(e)}
        )
