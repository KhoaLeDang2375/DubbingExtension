// H√†m l·∫•y video ID YouTube
function getYouTubeVideoId() {
  const url = window.location.href;

  const patterns = [
    /v=([a-zA-Z0-9_-]{11})/,
    /youtu\.be\/([a-zA-Z0-9_-]{11})/,
    /embed\/([a-zA-Z0-9_-]{11})/,
    /shorts\/([a-zA-Z0-9_-]{11})/
  ];

  for (const pattern of patterns) {
    const match = url.match(pattern);
    if (match && match[1]) return match[1];
  }

  return null;
}

// Inject button v√†o player controls
function injectButton() {
  // Tr√°nh ch√®n l·∫°i n·∫øu ƒë√£ c√≥
  if (document.getElementById("tts-dubber-btn")) return;

  const container = document.querySelector(".ytp-right-controls");
  if (!container) return; // ch∆∞a c√≥ player

  const btn = document.createElement("button");
  btn.id = "tts-dubber-btn";
  btn.innerText = "üéôÔ∏è B·∫≠t l·ªìng ti·∫øng";
  btn.style.cssText = `
    padding: 6px 10px;
    margin-left: 12px;
    background: #cc0000;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  `;

  btn.addEventListener("click", async () => {
    console.log("[TTS] K√≠ch ho·∫°t theo d√µi video...");

    const video = document.querySelector("video");
    if (!video) {
      alert("‚ùå Kh√¥ng t√¨m th·∫•y video.");
      return;
    }

    const videoId = getYouTubeVideoId();
    if (!videoId) {
      alert("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c video ID.");
      return;
    }

    chrome.runtime.sendMessage({ type: "GET_TTS_URL", videoId }, (response) => {
      if (response && response.audioUrl) {
        const ttsAudio = new Audio(response.audioUrl);
        ttsAudio.crossOrigin = "anonymous";

        video.addEventListener("play", () => {
          ttsAudio.currentTime = video.currentTime;
          ttsAudio.play();
        });

        video.addEventListener("pause", () => ttsAudio.pause());
        video.addEventListener("seeked", () => {
          ttsAudio.currentTime = video.currentTime;
        });

        alert("üîä L·ªìng ti·∫øng ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!");
      } else {
        alert("‚ùå Kh√¥ng th·ªÉ l·∫•y audio t·ª´ backend.");
      }
    });
  });

  container.appendChild(btn);
}

// Theo d√µi URL thay ƒë·ªïi (SPA)
let lastUrl = location.href;
new MutationObserver(() => {
  if (location.href !== lastUrl) {
    lastUrl = location.href;
    setTimeout(injectButton, 1000); // ch·ªù m·ªôt ch√∫t cho DOM s·∫µn s√†ng
  }
}).observe(document, { subtree: true, childList: true });

// Inject ban ƒë·∫ßu
setInterval(injectButton, 1500);
